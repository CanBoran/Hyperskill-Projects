type: edu
custom_name: stage5
files:
- name: src/life/GameOfLife.java
  visible: true
  text: |
    package life;

    import javax.swing.*;

    public class GameOfLife extends JFrame {
        public GameOfLife() {
            setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            setSize(300, 300);
            setVisible(true);
        }
    }
  learner_created: false
- name: test/GameOfLifeTest.java
  visible: false
  text: |2-

    import common.GameOfLifeStage5Test;

    public class GameOfLifeTest extends GameOfLifeStage5Test {

    }
  learner_created: false
- name: test/common/CheckResultUtil.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult

    operator fun CheckResult.component1(): Boolean = isCorrect
    operator fun CheckResult.component2(): String? = feedback

    fun Boolean.toCheckResult() = CheckResult(this, null)

    fun fail(message: String) = CheckResult(false, message)  // TODO: add to repo
  learner_created: false
- name: test/common/ClueWithChecker.kt
  visible: false
  text: |
    package common


    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase

    sealed class ClueWithChecker(val input: String) {
        fun toTestCase(): TestCase<ClueWithChecker> {
            return TestCase<ClueWithChecker>().setInput(input).setAttach(this)
        }
    }

    class ClueWithPredefinedFeedbackChecker(
            val predefinedFeedback: String,
            input: String,
            val checker: (String) -> Boolean
    ) : ClueWithChecker(input)

    class ClueWithDynamicFeedbackChecker(
            input: String,
            val checker: (String) -> CheckResult
    ) : ClueWithChecker(input)

    fun createPredefinedFeedbackTest(
            feedback: String,
            input: String = "",
            checker: (String) -> Boolean
    ): TestCase<ClueWithChecker> {
        return ClueWithPredefinedFeedbackChecker(
                predefinedFeedback = feedback,
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun createDynamicFeedbackTest(input: String = "", checker: (String) -> CheckResult): TestCase<ClueWithChecker> {
        return ClueWithDynamicFeedbackChecker(
                input = input,
                checker = checker
        ).toTestCase()
    }

    fun checkClueWithCheckerTest(reply: String, clue: ClueWithChecker): CheckResult {
        return try {
            when (clue) {
                is ClueWithDynamicFeedbackChecker -> clue.checker(reply)
                is ClueWithPredefinedFeedbackChecker -> CheckResult(clue.checker(reply), clue.predefinedFeedback)
            }
        } catch (e: AssertionError) {
            if (clue is ClueWithPredefinedFeedbackChecker) {
                fail(clue.predefinedFeedback)
            } else {
                CheckResult.FALSE
            }
        }
    }
  learner_created: false
- name: test/common/GameOfLifeCommonTest.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.testcase.CheckResult

    fun checkLabelForInteger(labelRequirements: ComponentRequirements<JLabelFixture>): CheckResult {
        val label = labelRequirements.requireExistingComponent()

        val labelDigits = label.text().trim { !it.isDigit() }

        if (labelDigits.toIntOrNull() == null) {
            return fail("The '${labelRequirements.name}' label doesn't contain an integer.")
        }

        return CheckResult.TRUE
    }
  learner_created: false
- name: test/common/GameOfLifeStage4Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JLabelFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage4Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel) +
                    componentsAreEnabledTests(generationLabel, aliveLabel) +
                    stage4Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage4Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createDynamicFeedbackTest {
                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/GameOfLifeStage5Test.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.JButtonFixture
    import org.assertj.swing.fixture.JLabelFixture
    import org.assertj.swing.fixture.JToggleButtonFixture
    import org.hyperskill.hstest.v6.common.Utils
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.CheckResult
    import org.hyperskill.hstest.v6.testcase.TestCase
    import life.GameOfLife

    abstract class GameOfLifeStage5Test : SwingTest<ClueWithChecker>(GameOfLife()) {

        override fun generate(): List<TestCase<ClueWithChecker>> {
            val generationLabel = ComponentRequirements("GenerationLabel", isEnabled = true) { window.label(it) }
            val aliveLabel = ComponentRequirements("AliveLabel", isEnabled = true) { window.label(it) }

            val playButton = ComponentRequirements("PlayToggleButton", isEnabled = true) { window.toggleButton(it) }
            val resetButton = ComponentRequirements("ResetButton", isEnabled = true) { window.button(it) }

            return frameTests(::frame) +
                    existenceTests(generationLabel, aliveLabel, playButton, resetButton) +
                    componentsAreEnabledTests(generationLabel, aliveLabel, playButton, resetButton) +
                    stage5Tests(
                            generationLabelRequirements = generationLabel,
                            aliveLabelRequirements = aliveLabel,
                            playButtonRequirements = playButton,
                            resetButtonRequirements = resetButton
                    )
        }

        override fun check(reply: String, clue: ClueWithChecker): CheckResult {
            return checkClueWithCheckerTest(reply = reply, clue = clue)
        }
    }

    fun stage5Tests(
            generationLabelRequirements: ComponentRequirements<JLabelFixture>,
            aliveLabelRequirements: ComponentRequirements<JLabelFixture>,
            playButtonRequirements: ComponentRequirements<JToggleButtonFixture>,
            resetButtonRequirements: ComponentRequirements<JButtonFixture>
    ): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("App crashes when reset is clicked") {
                    val resetButton = resetButtonRequirements.requireExistingComponent()

                    resetButton.click()

                    return@createPredefinedFeedbackTest true
                },

                createDynamicFeedbackTest {
                    /*
                    Flip-flop play button, check labels, reset, flip-flop again, check again
                    */

                    val playButton = playButtonRequirements.requireExistingComponent()

                    playButton.check()
                    Utils.sleep(100)
                    playButton.uncheck()

                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    val resetButton = resetButtonRequirements.requireExistingComponent()
                    resetButton.click()

                    Utils.sleep(100)

                    playButton.check()
                    Utils.sleep(100)
                    playButton.uncheck()

                    with(checkLabelForInteger(generationLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }
                    with(checkLabelForInteger(aliveLabelRequirements)) {
                        if (!this.isCorrect) {
                            return@createDynamicFeedbackTest this
                        }
                    }

                    return@createDynamicFeedbackTest CheckResult.TRUE
                }
        )
    }
  learner_created: false
- name: test/common/UiTestsGenerators.kt
  visible: false
  text: |
    package common


    import org.assertj.swing.fixture.AbstractJComponentFixture
    import org.hyperskill.hstest.v6.stage.SwingTest
    import org.hyperskill.hstest.v6.testcase.TestCase
    import javax.swing.JFrame

    fun frameTests(frameGetter: () -> JFrame): List<TestCase<ClueWithChecker>> {
        return listOf(
                createPredefinedFeedbackTest("Window is not visible") { frameGetter().isVisible }
        )
    }

    class ComponentRequirements<ComponentType : AbstractJComponentFixture<*, *, *>>(
            val name: String,
            val isEnabled: Boolean,
            private val componentFinder: (String) -> ComponentType?
    ) {
        val suitableComponent: ComponentType? by lazy { componentFinder(name) }
    }

    fun existenceTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateExistenceTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            return createPredefinedFeedbackTest("No suitable component with name '${requirements.name}' is found") {
                SwingTest.checkExistence { requirements.suitableComponent }
            }
        }

        return components.map(::generateExistenceTest)
    }

    fun componentsAreEnabledTests(vararg components: ComponentRequirements<*>): List<TestCase<ClueWithChecker>> {
        fun generateIsEnabledTest(requirements: ComponentRequirements<*>): TestCase<ClueWithChecker> {
            val (desiredState, stateChecker) = if (requirements.isEnabled) {
                "enabled" to { requirements.requireExistingComponent().isEnabled }
            } else {
                "disabled" to { !requirements.requireExistingComponent().isEnabled }
            }

            return createPredefinedFeedbackTest("The '${requirements.name}' component should be $desiredState") {
                stateChecker()
            }

        }

        return components.map(::generateIsEnabledTest)
    }

    fun <ComponentType : AbstractJComponentFixture<*, *, *>>
            ComponentRequirements<ComponentType>.requireExistingComponent(): ComponentType {
        return requireNotNull(this.suitableComponent) {
            "Must check for the '${this.name}' component existence before this test"
        }
    }
  learner_created: false
- name: src/life/Universe.java
  visible: true
  text: |
    package life;

    import javax.swing.*;
    import java.awt.*;
    import java.util.Random;

    public class Universe extends JPanel {

        final private int N;
        final private int M;
        final private int RECT_WIDTH = 20;
        final private int RECT_HEIGHT = RECT_WIDTH;
        private boolean world[][];
        private Random random;
        private int generation = 0;
        private int alive = 0;

        public Universe(int size) {
            N = size;
            M = size;
            world = new boolean[N][M];
            random = new Random();

            // Populate the universe
            for ( int i = 0; i < N; i++ ) {
                for ( int j = 0; j < M; j++ ) {
                    world[i][j] = random.nextBoolean();
                    alive += world[i][j]? 1 : 0;
                }
            }
        }

        public int getN() {
            return N;
        }

        public int getM() {
            return M;
        }

        public boolean getCell(int n, int m) {
            return world[n][m];
        }

        public int getAlive() {
            return alive;
        }

        public Dimension getPreferredSize() {
            return new Dimension(10 * 20, 200);
        }

        public boolean[][] getWorld(){
            return world;
        }

        public int getGeneration() {
            return generation;
        }

        public void nextWorld() {
            boolean[][] newWorld = new boolean[M][N];
            alive = 0;
            for ( int i = 0; i < N; i++ ) {
                for ( int j = 0; j < M; j++ ) {
                    newWorld[i][j] = isAlive(i,j);
                    alive += newWorld[i][j]? 1 : 0;
                }
            }
            generation++;
            world = newWorld;
        }

        // NW  N  NE
        // W   X   E
        // SW  S  SE
        private boolean isAlive(int n, int m) {

            int sum = 0;

            int[] offsetNW = new int[]{n - 1, m - 1};
            int[] offsetN = new int[]{n - 1, m};
            int[] offsetNE = new int[]{n - 1, m + 1};
            int[] offsetW = new int[]{n, m - 1};
            int[] offsetE = new int[]{n, m + 1};
            int[] offsetSW = new int[]{n + 1, m - 1};
            int[] offsetS = new int[]{n + 1, m};
            int[] offsetSE = new int[]{n + 1, m + 1};

            if (n == 0 && m == 0) {
                offsetNW[0] = N - 1;
                offsetN[0] = N - 1;
                offsetNE[0] = N - 1;
                offsetNW[1] = M - 1;
                offsetW[1] = M - 1;
                offsetSW[1] = M - 1;
            } else if (n + 1 == N && m == 0) {
                offsetSW[0] = 0;
                offsetS[0] = 0;
                offsetSE[0] = 0;
                offsetNW[1] = M - 1;
                offsetW[1] = M - 1;
                offsetSW[1] = M - 1;
            } else if (n == 0 && m + 1 == M) {
                offsetNW[0] = N - 1;
                offsetN[0] = N - 1;
                offsetNE[0] = N - 1;
                offsetNE[1] = 0;
                offsetE[1] = 0;
                offsetSE[1] = 0;
            } else if (n + 1 == N && m + 1 == M) {
                offsetNE[1] = 0;
                offsetE[1] = 0;
                offsetSE[1] = 0;
                offsetSE[0] = 0;
                offsetS[0] = 0;
                offsetSW[0] = 0;
            } else if (n == 0) {
                offsetNW[0] = N - 1;
                offsetN[0] = N - 1;
                offsetNE[0] = N - 1;
            } else if (m == 0) {
                offsetNW[1] = M - 1;
                offsetW[1] = M - 1;
                offsetSW[1] = M - 1;
            } else if (n + 1 == N) {
                offsetSW[0] = 0;
                offsetS[0] = 0;
                offsetSE[0] = 0;
            } else if (m + 1 == M) {
                offsetNE[1] = 0;
                offsetE[1] = 0;
                offsetSE[1] = 0;
            }
            sum += world[offsetNW[0]][offsetNW[1]] ? 1 : 0;  // NW
            sum += world[offsetN[0]][offsetN[1]] ? 1 : 0;      // N
            sum += world[offsetNE[0]][offsetNE[1]] ? 1 : 0;  // NE
            sum += world[offsetW[0]][offsetW[1]] ? 1 : 0;      // W
            sum += world[offsetE[0]][offsetE[1]] ? 1 : 0;      // E
            sum += world[offsetSW[0]][offsetSW[1]] ? 1 : 0;  // SW
            sum += world[offsetS[0]][offsetS[1]] ? 1 : 0;      // S
            sum += world[offsetSE[0]][offsetSE[1]] ? 1 : 0;  // SE

            if (sum == 2 && world[n][m]) {
                return true;
            } else if (sum == 3) {
                return true;
            } else {
                return false;
            }
        }

        public void printUniverse() {
            for(int i = 0; i < world.length; i++) {
                for(int j = 0; j < world.length; j++) {
                    if(world[i][j]) {
                        System.out.print('O');
                    } else {
                        System.out.print(' ');
                    }
                }
                System.out.printf("\n");
            }
        }
    }
  learner_created: true
- name: src/life/GameOfLifeController.java
  visible: true
  text: |
    package life;

    import static java.lang.Thread.interrupted;
    import static java.lang.Thread.sleep;

    public class GameOfLifeController implements Runnable {

        private final int size;
        private GameOfLife view;
        private Universe model;
        private boolean[][] world;
        private boolean paused = true;

        public GameOfLifeController(GameOfLife view, int size) {
            this.view = view;
            this.size = size;
            model = new Universe(size);
            view.drawWorld(model.getWorld());
        }

        public void update() {
            model.nextWorld();
            view.drawWorld(model.getWorld());
            view.setGenerationLabel(model.getGeneration());
            view.setAliveLabel(model.getAlive());
        }

        @Override
        public void run() {
            while(!interrupted()) {
                while (!paused) {
                    try {
                        sleep(1000);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                    update();
                }
            }
        }

        public void play() {
            paused = false;
        }

        public void pause() {
            paused = true;
        }

        public void reset() {
            model = new Universe(size);
            view.drawWorld(model.getWorld());
        }
    }
  learner_created: true
- name: src/life/Main.java
  visible: true
  text: |+
    package life;

    import javax.swing.*;
    import java.util.Arrays;
    import java.util.HashSet;
    import java.util.Set;

    public class Main {
        public static void main(String[] args) {

            GameOfLife gameWindow = new GameOfLife();

        }
    }

  learner_created: true
feedback_link: https://hyperskill.org/projects/54/stages/299/implement
status: Solved
record: -1
